[
  {
    "ID": "leNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "a"
    ],
    "citation": "10831",
    "date": "1998.11.01",
    "fullname": "leNet",
    "names": [],
    "parents": [],
    "training": [
      "3.2.1.SGD"
    ],
    "url": "http://ieeexplore.ieee.org/abstract/document/726791/",
    "variants": []
  },
  {
    "ID": "alexNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "a"
    ],
    "citation": "18438",
    "date": "2012.12.03",
    "fullname": "alexNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 36.7,
        "imagenet val top5": 15.4,
        "name": "alexNet",
        "params": 60.0
      }
    ],
    "parents": [
      {
        "ID": "leNet",
        "link_category": "a=>a",
        "link_info_l": "add regularization: dropout, data augmentation; change activication: relu; ",
        "link_info_s": "regularizer & activation"
      }
    ],
    "training": [
      "3.4.1.dropout",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "2.2.2.2.1.1.standard relu"
    ],
    "url": "https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks",
    "variants": []
  },
  {
    "ID": "inception",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c"
    ],
    "citation": "5591",
    "date": "2014.09.17",
    "fullname": "inception",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": null,
        "imagenet val top5": 6.67,
        "name": "inception",
        "params": 6.8
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 18.77,
        "imagenet val top5": 4.2,
        "name": "inception_v3",
        "params": 23.8
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 21.2,
        "imagenet val top5": 5.6,
        "name": "inception_v2",
        "params": 23.8
      }
    ],
    "parents": [
      {
        "ID": "VGG",
        "link_category": "a=>c",
        "link_info_l": "introduce multi-brach inception module=>less computation cost",
        "link_info_s": "inception module"
      }
    ],
    "training": [
      "3.4.1.dropout",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "2.2.2.2.1.1.standard relu"
    ],
    "url": "https://arxiv.org/abs/1409.4842",
    "variants": [
      {
        "ID": "inception_v2"
      },
      {
        "ID": "inception_v3"
      },
      {
        "ID": "inception_v4"
      }
    ]
  },
  {
    "ID": "VGG",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "a"
    ],
    "citation": "8205",
    "date": "2014.09.04",
    "fullname": "VGG",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 25.5,
        "imagenet val top5": 7.3,
        "name": "vgg19",
        "params": 144.0
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 25.6,
        "imagenet val top5": 8.1,
        "name": "vgg16",
        "params": 138.0
      }
    ],
    "parents": [
      {
        "ID": "alexNet",
        "link_category": "a=>a",
        "link_info_l": "increasing depth using an architecture with very small (3x3) convolution filters",
        "link_info_s": "small filter size & deeper"
      }
    ],
    "training": [
      "3.4.1.dropout",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "2.2.2.2.1.1.standard relu"
    ],
    "url": "https://arxiv.org/abs/1409.1556",
    "variants": []
  },
  {
    "ID": "highwayNets",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "320",
    "date": "2015.11.03",
    "fullname": "highwayNets",
    "names": [
      {
        "SVHN": null,
        "cifar10": 7.76,
        "cifar100": null,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "highwayNets",
        "params": 2.3
      }
    ],
    "parents": [
      {
        "ID": "VGG",
        "link_category": "a=>b",
        "link_info_l": "introduce gated skip connections to train extremely deep models directly from scratch",
        "link_info_s": "gated skip connections"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/pdf/1505.00387.pdf",
    "variants": []
  },
  {
    "ID": "resNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "5464",
    "date": "2015.12.10",
    "fullname": "Residual Networks",
    "names": [
      {
        "SVHN": null,
        "cifar10": 6.97,
        "cifar100": 25.16,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "resNet_v1_56_cifar",
        "params": 0.86
      },
      {
        "SVHN": null,
        "cifar10": 6.43,
        "cifar100": 25.16,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "resNet_v1_110_cifar",
        "params": 1.7
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 24.1,
        "imagenet val top5": 7.1,
        "name": "resNet_v1_50",
        "params": 25.6
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 21.43,
        "imagenet val top5": 5.71,
        "name": "resNet_v1_152",
        "params": 60.4
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 35.29,
        "imagenet val top5": null,
        "name": "resNet_v2",
        "params": 0.0
      },
      {
        "SVHN": null,
        "cifar10": 6.99,
        "cifar100": null,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "resNet_v2_56_cifar",
        "params": 1.6
      },
      {
        "SVHN": null,
        "cifar10": 6.38,
        "cifar100": 24.64,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "resNet_v2_110_cifar",
        "params": 3.3
      }
    ],
    "parents": [
      {
        "ID": "VGG",
        "link_category": "a=>b",
        "link_info_l": "introduce residual connections",
        "link_info_s": "residual connection"
      },
      {
        "ID": "highwayNets",
        "link_category": "b=>b",
        "link_info_l": "skip connections without gate",
        "link_info_s": "remove gate"
      }
    ],
    "training": [
      "3.4.4.batch normalization",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "3.1.7.he_normal"
    ],
    "url": "https://arxiv.org/abs/1512.03385",
    "variants": [
      {
        "ID": "WRN",
        "application": [
          "1.1.1.general recognition"
        ],
        "architecture": [
          "b"
        ],
        "citation": "285",
        "date": "2016.05.23",
        "fullname": "Wide ReseNet",
        "names": [
          {
            "SVHN": 1.64,
            "cifar10": 5.24,
            "cifar100": 23.91,
            "imageNet val top1": null,
            "imagenet val top5": null,
            "name": "wideResNet_16_4",
            "params": 2.9
          },
          {
            "SVHN": 1.64,
            "cifar10": 3.89,
            "cifar100": 18.85,
            "imageNet val top1": null,
            "imagenet val top5": null,
            "name": "wideResNet_28_10",
            "params": 36.0
          },
          {
            "SVHN": null,
            "cifar10": null,
            "cifar100": null,
            "imageNet val top1": 21.9,
            "imagenet val top5": 5.79,
            "name": "wideResNet-50-2",
            "params": 0.0
          }
        ],
        "parents": [
          {
            "ID": "resNet",
            "link_category": "b=>b",
            "link_info_l": "to increase the parameter efficiency, increase the number of channels and decrease the number of layers",
            "link_info_s": "wider and shallower"
          }
        ],
        "training": [
          "3.4.4.batch normalization",
          "3.2.1.SGD with momentum",
          "3.4.2.weight decay",
          "3.4.1.dropout"
        ],
        "url": "https://arxiv.org/abs/1605.07146",
        "variants": []
      },
      {
        "ID": "RIR",
        "application": [
          "1.1.1.general recognition"
        ],
        "architecture": [
          "b"
        ],
        "citation": "37",
        "date": "2016.05.25",
        "fullname": "ResNet in ResNet",
        "names": [
          {
            "SVHN": null,
            "cifar10": 5.01,
            "cifar100": 22.9,
            "imageNet val top1": null,
            "imagenet val top5": null,
            "name": "resNet-in-resent",
            "params": 0.0
          }
        ],
        "parents": [
          {
            "ID": "resNet",
            "link_category": "b=>b",
            "link_info_l": "generalizes ResNets and standard CNNs",
            "link_info_s": "generalizes"
          }
        ],
        "training": [
          "3.4.4.batch normalization",
          "3.2.1.SGD with momentum",
          "3.4.2.weight decay",
          "3.4.1.dropout"
        ],
        "url": "https://arxiv.org/abs/1603.08029",
        "variants": []
      },
      {
        "ID": "resNet_v2"
      }
    ]
  },
  {
    "ID": "inception_resNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c",
      "b"
    ],
    "citation": "480",
    "date": "2016.02.23",
    "fullname": "inception_resNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 17.8,
        "imagenet val top5": 3.7,
        "name": "inception_resNet",
        "params": 55.8
      }
    ],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c",
        "link_info_l": "combine resnet with inception",
        "link_info_s": "combine"
      },
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "combine resnet with inception",
        "link_info_s": "combine"
      }
    ],
    "training": [
      "3.2.3.RMSprop",
      "scaling of the residuals",
      "3.4.1.dropout",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay"
    ],
    "url": "https://arxiv.org/abs/1602.07261",
    "variants": []
  },
  {
    "ID": "fractalNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c"
    ],
    "citation": "71",
    "date": "2016.05.24",
    "fullname": "fractalNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": 5.24,
        "cifar100": 22.49,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "fractalNet-40",
        "params": 22.9
      },
      {
        "SVHN": null,
        "cifar10": 5.22,
        "cifar100": 23.3,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "fractalNet-20",
        "params": 38.6
      }
    ],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c",
        "link_info_l": "exploiting the split-transform-merge strategy in an easy, extensible way",
        "link_info_s": "split-transfer-merge"
      },
      {
        "ID": "resNet",
        "link_category": "b=>c",
        "link_info_l": "train very deep networks with residual connections",
        "link_info_s": "deep without residual"
      }
    ],
    "training": [
      "3.4.3.drop path",
      "3.4.4.batch normalization",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "3.4.1.dropout"
    ],
    "url": "https://arxiv.org/abs/1605.07648",
    "variants": []
  },
  {
    "ID": "resNeXt",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b",
      "c"
    ],
    "citation": "134",
    "date": "2016.11.16",
    "fullname": "resNeXt",
    "names": [
      {
        "SVHN": null,
        "cifar10": 3.58,
        "cifar100": 17.31,
        "imageNet val top1": 20.4,
        "imagenet val top5": 5.3,
        "name": "ResNeXt",
        "params": 25.0
      }
    ],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c",
        "link_info_l": "exploiting the split-transform-merge strategy in an easy, extensible way",
        "link_info_s": "split-transfer-merge"
      },
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "add a new dimension called \"cardinality\"",
        "link_info_s": "residual connections"
      },
      {
        "ID": "inception_resNet",
        "link_category": "b+c=>b+c",
        "link_info_l": "similar architeccture, yet ResNeXt has fewer hyperparameter and is highly modulized",
        "link_info_s": "highly modulized"
      }
    ],
    "training": [
      "3.4.7.pre-activation",
      "3.4.4.batch normalization",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay"
    ],
    "url": "https://arxiv.org/abs/1611.05431",
    "variants": []
  },
  {
    "ID": "denseNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "378",
    "date": "2016.08.25",
    "fullname": "Densely Connected Networks",
    "names": [
      {
        "SVHN": 1.79,
        "cifar10": 5.24,
        "cifar100": 24.42,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet_40_12",
        "params": 1.0
      },
      {
        "SVHN": 1.67,
        "cifar10": 4.1,
        "cifar100": 20.2,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet_100_12",
        "params": 7.2
      },
      {
        "SVHN": 1.59,
        "cifar10": 3.74,
        "cifar100": 19.25,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet_100_24",
        "params": 27.2
      },
      {
        "SVHN": 1.76,
        "cifar10": 4.51,
        "cifar100": 22.27,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet-BC(l=100, k=12)",
        "params": 0.8
      },
      {
        "SVHN": 1.74,
        "cifar10": 3.62,
        "cifar100": 17.6,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet-BC(l=250, k=24)",
        "params": 15.3
      },
      {
        "SVHN": null,
        "cifar10": 3.46,
        "cifar100": 17.18,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "denseNet-BC(l=190, k=40)",
        "params": 25.6
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 25.02,
        "imagenet val top5": 7.71,
        "name": "denseNet_121",
        "params": 8.1
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 22.58,
        "imagenet val top5": 6.34,
        "name": "denseNet_201",
        "params": 20.2
      }
    ],
    "parents": [
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "dense residual connection; use concate instead of adding to combine mult-braches",
        "link_info_s": "dense residual connections"
      }
    ],
    "training": [
      "3.4.1.dropout",
      "3.2.1.SGD with nesterov momentum",
      "3.4.2.weight decay",
      "3.1.7.he_normal"
    ],
    "url": "https://arxiv.org/abs/1608.06993",
    "variants": []
  },
  {
    "ID": "squeezeNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c"
    ],
    "citation": "264",
    "date": "2016.02.24",
    "fullname": "squeezeNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 39.6,
        "imagenet val top5": 17.5,
        "name": "squeezeNet",
        "params": 1.24
      }
    ],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c",
        "link_info_l": "exploiting the split-transform-merge strategy in an easy, extensible way",
        "link_info_s": "split-transfer-merge"
      },
      {
        "ID": "alexNet",
        "link_category": "a=>c",
        "link_info_l": "same performance with 50x less parameters",
        "link_info_s": "50x less parameters"
      }
    ],
    "training": [
      "3.4.1.dropout",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay"
    ],
    "url": "https://arxiv.org/abs/1602.07360",
    "variants": []
  },
  {
    "ID": "diracNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "a"
    ],
    "citation": "4",
    "date": "2017.06.07",
    "fullname": "diracNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": 3.16,
        "cifar100": 23.44,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "diracNet-28-5",
        "params": 9.1
      },
      {
        "SVHN": null,
        "cifar10": 4.75,
        "cifar100": 21.54,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "diracNet-28-10",
        "params": 36.5
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 30.37,
        "imagenet val top5": 10.88,
        "name": "diracNet-18",
        "params": 11.7
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 27.79,
        "imagenet val top5": 9.34,
        "name": "diracNet-34",
        "params": 21.8
      }
    ],
    "parents": [
      {
        "ID": "resNet",
        "link_category": "b=>a",
        "link_info_l": "parameterize weights as a residual of Dirac function",
        "link_info_s": "implicit residual"
      }
    ],
    "training": [
      "3.1.11.dirac",
      "3.4.4.batch normalization",
      "3.2.1.SGD with momentum",
      "3.4.2.weight decay",
      "3.4.1.dropout"
    ],
    "url": "https://arxiv.org/abs/1706.00388",
    "variants": []
  },
  {
    "ID": "nasNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c",
      "b",
      "d"
    ],
    "citation": "35",
    "date": "2017.12.01",
    "fullname": "nasNet",
    "names": [
      {
        "SVHN": null,
        "cifar10": 2.65,
        "cifar100": null,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "nasNet_cifar",
        "params": 3.3
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 17.3,
        "imagenet val top5": 3.8,
        "name": "nasNet_large",
        "params": 11.1
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 26.0,
        "imagenet val top5": 8.4,
        "name": "nasNet_small",
        "params": 5.3
      }
    ],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c",
        "link_info_l": "borrow the multi-brach, 1x7 then 7x1 convolution, 1x3 then 3x1 convolution from Inception and let neural architecture search (NAS) select from it",
        "link_info_s": "borrow operations"
      },
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "borrow the skip connections from ResNet and let neural architecture search (NAS) select from them",
        "link_info_s": "borrow operations"
      },
      {
        "ID": "mobileNet",
        "link_category": "d=>d",
        "link_info_l": "borrow the depthwise separable conv from mobileNet and let neural architecture search (NAS) select from them",
        "link_info_s": "borrow operations"
      }
    ],
    "training": [
      "neural architecture search by reinforcement learning"
    ],
    "url": "https://arxiv.org/abs/1707.07012",
    "variants": []
  },
  {
    "ID": "SENet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "48",
    "date": "2017.09.05",
    "fullname": "Squeeze-and-Excitation Networks",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 19.8,
        "imagenet val top5": 4.79,
        "name": "seNet_inception_resnetv2",
        "params": 65.6
      }
    ],
    "parents": [
      {
        "ID": "mobileNet",
        "link_category": "a=>b",
        "link_info_l": "insipired by the manipulation on channels=>significant performance improvements with slight computional cost",
        "link_info_s": "manipulate channels"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1709.01507",
    "variants": []
  },
  {
    "ID": "mixNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "0",
    "date": "2018.02.06",
    "fullname": "",
    "names": [
      {
        "SVHN": 1.57,
        "cifar10": 4.19,
        "cifar100": 21.12,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "mixNet-100",
        "params": 1.5
      },
      {
        "SVHN": 1.51,
        "cifar10": 3.32,
        "cifar100": 17.06,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "mixNet-250",
        "params": 29.0
      },
      {
        "SVHN": null,
        "cifar10": 3.13,
        "cifar100": 16.92,
        "imageNet val top1": null,
        "imagenet val top5": null,
        "name": "mixNet-190",
        "params": 48.5
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 23.3,
        "imagenet val top5": 6.7,
        "name": "mixNet-105",
        "params": 11.16
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 21.9,
        "imagenet val top5": 5.9,
        "name": "mixNet-121",
        "params": 21.86
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 20.4,
        "imagenet val top5": 5.3,
        "name": "mixNet-141",
        "params": 41.07
      }
    ],
    "parents": [
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "generalize the connections in ResNet, DenseNet and DPN",
        "link_info_s": "generalize"
      },
      {
        "ID": "denseNet",
        "link_category": "b=>b",
        "link_info_l": "generalize the connections in ResNet, DenseNet and DPN",
        "link_info_s": "generalize"
      },
      {
        "ID": "DPN",
        "link_category": "b=>b",
        "link_info_l": "generalize the connections in ResNet, DenseNet and DPN",
        "link_info_s": "generalize"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1802.01808",
    "variants": []
  },
  {
    "ID": "DPN",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "b"
    ],
    "citation": "31",
    "date": "2017.06.06",
    "fullname": "Dual Path Networks",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 20.8,
        "imagenet val top5": 5.4,
        "name": "DPN-92",
        "params": 145.0
      }
    ],
    "parents": [
      {
        "ID": "denseNet",
        "link_category": "b=>b",
        "link_info_l": "combine the connections in DenseNet and ResNet",
        "link_info_s": "combine"
      },
      {
        "ID": "resNet",
        "link_category": "b=>b",
        "link_info_l": "combine the connections in DenseNet and ResNet",
        "link_info_s": "combine"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/pdf/1707.01629.pdf",
    "variants": []
  },
  {
    "ID": "xception",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "c",
      "d"
    ],
    "citation": "114",
    "date": "2016.10.07",
    "fullname": "",
    "names": [],
    "parents": [
      {
        "ID": "inception",
        "link_category": "c=>c+d",
        "link_info_l": "the inception modules are replaced with depthwise separable convolutions=>improve parameter efficiency",
        "link_info_s": "depthwise seperable conv"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1610.02357",
    "variants": []
  },
  {
    "ID": "mobileNet",
    "application": [
      "1.1.1.general recognition"
    ],
    "architecture": [
      "d",
      "a"
    ],
    "citation": "149",
    "date": "2017.04.17",
    "fullname": "",
    "names": [
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 29.4,
        "imagenet val top5": null,
        "name": "mobileNet-224",
        "params": 4.2
      },
      {
        "SVHN": null,
        "cifar10": null,
        "cifar100": null,
        "imageNet val top1": 39.8,
        "imagenet val top5": null,
        "name": "mobileNet-160",
        "params": 1.32
      }
    ],
    "parents": [
      {
        "ID": "xception",
        "link_category": "d=>d",
        "link_info_l": "borrow the depthwise seperable convolutions used",
        "link_info_s": "depthwise seperable conv"
      },
      {
        "ID": "VGG",
        "link_category": "a=>a",
        "link_info_l": "apply the same streamlined architecture; add batch normalization; replace normal conv blocks with depthwise seperable conv blocks",
        "link_info_s": "same streamlined architecture"
      },
      {
        "ID": "squeezeNet",
        "link_category": "c=>a",
        "link_info_l": "mobileNet and squeezeNet both aim to build small networks. MobileNet has better performance and less computation cost compared with SqueezeNet with the same size.",
        "link_info_s": "same small size with better performance"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1704.04861",
    "variants": []
  },
  {
    "ID": "SRN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [],
    "citation": "9047",
    "date": "1990.03.01",
    "fullname": "simple RNN",
    "names": [
      {
        "name": "recurrent neural network",
        "params": 0.0
      }
    ],
    "parents": [],
    "training": [],
    "url": "http://onlinelibrary.wiley.com/doi/10.1207/s15516709cog1402_1/full",
    "variants": []
  },
  {
    "ID": "attention",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [],
    "citation": "2081",
    "date": "2014.09.01",
    "fullname": "RNN with attention mechanism",
    "names": [],
    "parents": [
      {
        "ID": "seq2seq",
        "link_category": " ",
        "link_info_l": "Attention mechanism allows  to search relevant parts in the context at each step of the output generation.",
        "link_info_s": "add attention"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1409.0473",
    "variants": []
  },
  {
    "ID": "seq2seq",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [],
    "citation": "2829",
    "date": "2014.09.10",
    "fullname": "sequence to sequence",
    "names": [
      {
        "name": "squence to sequence",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "",
        "link_info_l": "introduce a RNN architecture to map squence to sequence",
        "link_info_s": "sequence to sequence"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1409.3215",
    "variants": []
  },
  {
    "ID": "conv seq2seq",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [],
    "citation": "73",
    "date": "2017.05.08",
    "fullname": "conv seq2seq",
    "names": [],
    "parents": [
      {
        "ID": "seq2seq",
        "link_category": "",
        "link_info_l": "Introduce a CNN structure to map sequence to sequence.  Compared previous RNN architecture, it has a faster speed with a high accuracy.",
        "link_info_s": "CNN for high speed"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1705.03122",
    "variants": []
  },
  {
    "ID": "ESN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [],
    "citation": "1517",
    "date": "2004.04.02",
    "fullname": "echo state networks",
    "names": [
      {
        "name": "echo state network",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "",
        "link_info_l": "ESN use reservior computing to set the recurrent weights such that the recurrent hidden units do a good job of capturing the history of past inputs.  Only the output weights need to be learnt.",
        "link_info_s": "reservoir computing"
      }
    ],
    "training": [],
    "url": "http://science.sciencemag.org/content/304/5667/78",
    "variants": []
  },
  {
    "ID": "ESN with leaky units",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "c"
    ],
    "citation": "414",
    "date": "2007.04.01",
    "fullname": "echo state networks with leaky integration units",
    "names": [],
    "parents": [
      {
        "ID": "ESN",
        "link_category": "c",
        "link_info_l": "An extension to echo state networks by leaky integration units",
        "link_info_s": "leaky units"
      },
      {
        "ID": "leaky units",
        "link_category": "c=>c",
        "link_info_l": "An extension to echo state networks by leaky integration units",
        "link_info_s": "use it"
      }
    ],
    "training": [],
    "url": "https://www.sciencedirect.com/science/article/pii/S089360800700041x",
    "variants": []
  },
  {
    "ID": "time skip connections",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "c"
    ],
    "citation": "15",
    "date": "1998.10.15",
    "fullname": "recurrent neural units with time skip connections",
    "names": [],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "c",
        "link_info_l": " To address long-term dependency, it adds direct connections from variables in the distant past to variables in the present.",
        "link_info_s": "add long time scale"
      }
    ],
    "training": [],
    "url": "https://drum.lib.umd.edu/handle/1903/745",
    "variants": []
  },
  {
    "ID": "CW-RNN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "c"
    ],
    "citation": "135",
    "date": "2014.02.14",
    "fullname": "replace some short-time connections with long-time connections",
    "names": [],
    "parents": [
      {
        "ID": "time skip connections",
        "link_category": "c=>c",
        "link_info_l": "Time skip connections add edges, so the units can choose to operate on a long time scale or focus on a short one; Removing connections force units to operate the long time scale.  ",
        "link_info_s": "force on long time scale"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/pdf/1402.3511.pdf",
    "variants": []
  },
  {
    "ID": "leaky units",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "c"
    ],
    "citation": "900",
    "date": "2013.02.13",
    "fullname": "recurrent neural units  leaky units",
    "names": [],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "c",
        "link_info_l": " To address long-term dependency, it adds linear self connections with a weight near one.",
        "link_info_s": "linear self connections"
      },
      {
        "ID": "time skip connections",
        "link_category": "c=>c",
        "link_info_l": "Leaky units are units  with linear self-connections and a weight near one on these connections. Leaky units are more smooth and flexible than skip time connections since it adjust the real-valed weight rather than the integer-valued time skip.",
        "link_info_s": "smooth and flexible"
      }
    ],
    "training": [],
    "url": "",
    "variants": []
  },
  {
    "ID": "LSTM",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "d"
    ],
    "citation": "8136",
    "date": "1997.12.15",
    "fullname": "long short term memory",
    "names": [],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "d",
        "link_info_l": "LSTM uses a gated self-loop to learn long-term dependencies more easily",
        "link_info_s": "gated units"
      },
      {
        "ID": "leaky units",
        "link_category": "c=>d",
        "link_info_l": "LSTM and leaky units adopt different methods to accumulate information through time. ",
        "link_info_s": ""
      }
    ],
    "training": [],
    "url": "https://www.mitpressjournals.org/doi/abs/10.1162/neco.1997.9.8.1735",
    "variants": [
      {
        "ID": "add forget gate",
        "application": [
          "1.2.NLP"
        ],
        "architecture": [
          "d"
        ],
        "citation": "848",
        "date": "1999.09.07",
        "fullname": "LSTM with forget gate",
        "names": [],
        "parents": [
          {
            "ID": "initial LSTM",
            "link_category": "d=>d",
            "link_info_l": "Add forget gate to LSTM cells.  These cells learn to reset themselves at appropriate times, thus releasing internal resources.",
            "link_info_s": "forget gate"
          }
        ],
        "training": [],
        "url": "http://digital-library.theiet.org/content/conferences/10.1049/cp_19991218",
        "variants": []
      },
      {
        "ID": "add peephole",
        "application": [
          "1.2.NLP"
        ],
        "architecture": [
          "d"
        ],
        "citation": "157",
        "date": "2000.07.01",
        "fullname": "LSTM with peephole connetions",
        "names": [],
        "parents": [
          {
            "ID": "LSTM with forget",
            "link_category": "d=>d",
            "link_info_l": " Make the weights on the self-loop conditioned on the context, rather than \ufb01xed",
            "link_info_s": "peephole connections"
          }
        ],
        "training": [],
        "url": "http://ieeexplore.ieee.org/abstract/document/861302/",
        "variants": []
      },
      {
        "ID": "with BPTT",
        "application": [
          "1.2.NLP"
        ],
        "architecture": [
          "d"
        ],
        "citation": "777",
        "date": "2005.07.01",
        "fullname": "the modern long short-term memory",
        "names": [],
        "parents": [
          {
            "ID": "LSTM with peephole",
            "link_category": "d=>d",
            "link_info_l": "use full backpropogation through time for training ",
            "link_info_s": "BPTT"
          }
        ],
        "training": [],
        "url": "https://www.sciencedirect.com/science/article/pii/S0893608005001206",
        "variants": []
      }
    ]
  },
  {
    "ID": "GRU",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "d"
    ],
    "citation": "2069",
    "date": "2014.06.03",
    "fullname": "gated recurrent unit",
    "names": [
      {
        "name": "gated recurrent unit",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "LSTM",
        "link_category": "d=>d",
        "link_info_l": "To improve computation effiency, the gates of a recureent uit is redesigned in GRU, input gate and forget gate are combined into one single gate. input, forget, output gates=>reset, update gates",
        "link_info_s": "redesign gates"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1406.1078",
    "variants": []
  },
  {
    "ID": "recursive",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "e"
    ],
    "citation": "1050",
    "date": "1990.11.01",
    "fullname": "recursive neural network",
    "names": [
      {
        "name": "recursive neural network",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "e",
        "link_info_l": "Generalize RNN from chain-like structure to tree-like structure",
        "link_info_s": "chain to tree"
      }
    ],
    "training": [],
    "url": "https://www.sciencedirect.com/science/article/pii/000437029090005K",
    "variants": []
  },
  {
    "ID": "tree-LSTM",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "d",
      "e"
    ],
    "citation": "549",
    "date": "2015.02.28",
    "fullname": "tree structured long short term memory",
    "names": [],
    "parents": [
      {
        "ID": "LSTM",
        "link_category": "d=>d",
        "link_info_l": "a generalization of LSTMs from chain-structured to tree-structured network topologies",
        "link_info_s": "chain to tree"
      },
      {
        "ID": "recursive",
        "link_category": "e=>e",
        "link_info_l": "build a recursive neural networks with LSTM cells",
        "link_info_s": "use LSTM"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1503.00075",
    "variants": []
  },
  {
    "ID": "DGLSTM",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "d",
      "a"
    ],
    "citation": "15",
    "date": "2015.08.01",
    "fullname": "depth-gated long short-term memory",
    "names": [],
    "parents": [
      {
        "ID": "LSTM",
        "link_category": "d=>d",
        "link_info_l": "an extension of LSTM to use a depth gate to connect memory cells of adjacent layers",
        "link_info_s": "add depth gate"
      },
      {
        "ID": "stacked RNN",
        "link_category": "a=>d",
        "link_info_l": "add gated skip connection",
        "link_info_s": "gated skip connection"
      }
    ],
    "training": [],
    "url": "https://pdfs.semanticscholar.org/d3e9/9f2f98ac361aded0b9b9d90b6f9fe8bbbc70.pdf",
    "variants": []
  },
  {
    "ID": "BRNN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "b"
    ],
    "citation": "984",
    "date": "1997.12.01",
    "fullname": "bidirectional RNN",
    "names": [
      {
        "name": "bidirectional recurrent neural network",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "b=>b",
        "link_info_l": "Bidirectional inputs enable the current state to get information from both past and future input.",
        "link_info_s": "bidirectional inputs"
      }
    ],
    "training": [],
    "url": "http://ieeexplore.ieee.org/abstract/document/650093/",
    "variants": []
  },
  {
    "ID": "stacked RNN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "a"
    ],
    "citation": "263",
    "date": "1992.03.01",
    "fullname": "stacked RNN",
    "names": [],
    "parents": [
      {
        "ID": "SRN",
        "link_category": "a",
        "link_info_l": "Increase deepth to improve the representational capacity",
        "link_info_s": "deeper"
      }
    ],
    "training": [],
    "url": "http://ieeexplore.ieee.org/document/6795261/",
    "variants": []
  },
  {
    "ID": "DB-LSTM",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "d",
      "b",
      "a"
    ],
    "citation": "1897",
    "date": "2013.03.22",
    "fullname": "deep bidirectional LSTM",
    "names": [
      {
        "name": "deep bidirectional LSTM",
        "params": 0.0
      }
    ],
    "parents": [
      {
        "ID": "LSTM",
        "link_category": "d=>d",
        "link_info_l": "combine it with other methods and successfully use RNN in speech recognition",
        "link_info_s": "combine with other methods"
      },
      {
        "ID": "BRNN",
        "link_category": "b=>b",
        "link_info_l": "combine it with other methods and successfully use RNN in speech recognition",
        "link_info_s": "combine with other methods"
      },
      {
        "ID": "stacked RNN",
        "link_category": "a=>a",
        "link_info_l": "combine it with other methods and successfully use RNN in speech recognition",
        "link_info_s": "combine with other methods"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1303.5778",
    "variants": []
  },
  {
    "ID": "DT-RNN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "a"
    ],
    "citation": "269",
    "date": "2013.12.20",
    "fullname": "deep transition RNN",
    "names": [],
    "parents": [
      {
        "ID": "stacked RNN",
        "link_category": "a=>a",
        "link_info_l": "use MLP to increase the network depth",
        "link_info_s": "add MLP"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1312.6026",
    "variants": []
  },
  {
    "ID": "DT(S)-RNN",
    "application": [
      "1.2.NLP"
    ],
    "architecture": [
      "a"
    ],
    "citation": "269",
    "date": "2013.12.20",
    "fullname": "deep transition RNN with skip connections",
    "names": [],
    "parents": [
      {
        "ID": "DT-RNN",
        "link_category": "a=>a",
        "link_info_l": "add skip connections",
        "link_info_s": "skip connections"
      }
    ],
    "training": [],
    "url": "https://arxiv.org/abs/1312.6026",
    "variants": []
  }
]